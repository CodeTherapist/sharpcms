<?xml version="1.0" encoding="utf-8"?>
<page>
  <attributes>
    <pagename>Dateiupload in eine Datenbank</pagename>
    <name>dateiupload_in_eine_datenbank</name>
    <menuname>Dateiupload_DB</menuname>
    <pageidentifier>german/tutorials/asp.net/dateiupload_in_eine_datenbank</pageidentifier>
    <status>open</status>
    <lastedited>03.05.2003</lastedited>
    <metadescription>Einfacher Mehrfachupload von Dateien in eine Datenbank auf dem Server</metadescription>
    <metakeywords>Upload, asp.net, vb.net, System.Web.UI.HtmlControls.HtmlInputFile, System.Web.HttpFileCollection, Request.Files, Datenbank</metakeywords>
  </attributes>
  <containers>
    <container name="content">
      <elements>
        <element type="header">
          <text>Dateiupload in eine Datenbank</text>
          <headerstyle>Header1</headerstyle>
          <offset>2 lines</offset>
        </element>
        <element type="freetext">
          <text>&lt;p&gt;Autor: Jürgen Gutsch&lt;/p&gt;
&lt;p&gt;Version: 1.0&lt;/p&gt;
&lt;p&gt;Sprache: vb.net&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Benötigt wird:&lt;/p&gt;
&lt;p&gt;.net Framework ab v1.x.xxxx&lt;/p&gt;
&lt;p&gt;Odbc.net&lt;/p&gt;
&lt;p&gt;VisualStudio.net&lt;/p&gt;
&lt;p&gt;Und eine beliebige Datenbank mit dazugehörendem Odbc-Treiber&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Die Scripts wurden mit folgenden Datenbanken getestet:&lt;/p&gt;
&lt;p&gt;mssql-Server 2000 (Odbc-Treiber: SQL Server v 2000)&lt;/p&gt;
&lt;p&gt;mySQL v4.0.0 Alpha-NT (Odbc-Treiber: myODBC v 2.50.39.00)&lt;/p&gt;
&lt;p&gt;Access 2000 (Odbc-Treiber: Microsoft Access Driver 4.00.6019.00)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Getestet auf winXP-Professional (IIS 5.1)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;Upload in eine Datenbank&lt;/h2&gt;
&lt;p&gt;&lt;p&gt; 
&lt;h3&gt;Die Datenbank&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
Die Schwierigkeit beim Datenbankupload besteht nicht nur unbedingt darin, die Datei auf den Server zu laden und weiter zu verarbeiten, sondern eher darin, die hochgeladene Datei in die Datenbank zu bekommen. Mit einfachem SQL kommt man da nicht weit, wie ich feststellen musste.&lt;/p&gt;
Bauen wir uns ersteinmal die Datenbank zusammen (für die Beispiele hier benutze ich den SQL Server, in der &lt;a href="default.aspx?process=download/files/documents/_asp.net.fileupload.zip&amp;download=true" class="text"&gt;Downloadfile&lt;/a&gt; ist allerdings noch ein SQL-Dump für mySQL und eine Access Datenbank enthalten). Zuerst muss eine neue Datenbank angelegt werden). Die Tabelle "documents" sieht folgendermaßen aus:&lt;/p&gt;
&lt;pre&gt;id [numeric](20, 0) IDENTITY (1, 1) NOT NULL ,
contenttype [varchar] (50) NOT NULL ,
contentlength [numeric](20, 0) NOT NULL ,
filename [varchar] (150) NOT NULL ,
filecontent [image] NOT NULL
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Man beachte, dass die Spalte &lt;span style="font-style:italic"&gt;filecontent&lt;/span&gt; von Typ &lt;span style="font-style:italic"&gt;image&lt;/span&gt; ist und nicht &lt;span style="font-style:italic"&gt;binary&lt;/span&gt;. &lt;span style="font-style:italic"&gt;binary&lt;/span&gt; hat den Nachteil, dass immer 8.000 Bytes in der Datenbank reserviert werden, und auch nicht mehr als 8.000 Bytes aufnehmen kann. Auch &lt;span style="font-style:italic"&gt;varbinary&lt;/span&gt; kann nur maximal 8.000 Bytes aufnehmen. &lt;span style="font-style:italic"&gt;image&lt;/span&gt; dagegen ist ein &lt;span style="font-style:italic"&gt;variabler Datentyp&lt;/span&gt;, der bis zu 2&lt;sup style="font-size:10px;color:black"&gt;31&lt;/sup&gt;-1 Bytes fassen kann (2,147,483,647 Bytes)&lt;/p&gt;
(&lt;span style="font-weight:bold;"&gt;Anmerkung&lt;/span&gt;: für Access wird der Typ &lt;span style="font-style:italic"&gt;OLE-Objekt&lt;/span&gt; verwendet, und für mySQL der Typ &lt;span style="font-style:italic"&gt;Blob&lt;/span&gt; (65536 Bytes), ansonsten unterscheiden sich die Tabellen nicht sehr, in den jeweiligen Datenbanken)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Das Formular&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Legen wir nun eine aspx-Seite "&lt;span style="font-style:italic"&gt;upload.aspx&lt;/span&gt;" im VisualStudio an.&lt;/p&gt;
&lt;p&gt;Sie sollte jetzt etwa so aussehen:&lt;/p&gt;				
&lt;pre&gt;&amp;lt;%@ Page Language=&amp;quot;vb&amp;quot; AutoEventWireup=&amp;quot;false&amp;quot; 
    Codebehind=&amp;quot;upload.aspx.vb&amp;quot; Inherits=&amp;quot;tutorials.upload&amp;quot;%&amp;gt;
&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 4.0 Transitional//EN&amp;quot;&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;WebForm1&amp;lt;/title&amp;gt;
&amp;lt;meta name=&amp;quot;GENERATOR&amp;quot; content=&amp;quot;Microsoft Visual Studio.NET 7.0&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;CODE_LANGUAGE&amp;quot; content=&amp;quot;Visual Basic 7.0&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;vs_defaultClientScript&amp;quot; content=&amp;quot;JavaScript&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;vs_targetSchema&amp;quot; 
            content=&amp;quot;http://schemas.microsoft.com/intellisense/ie5&amp;quot;&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form id=&amp;quot;Form1&amp;quot; method=&amp;quot;post&amp;quot; runat=&amp;quot;server&amp;quot;&amp;gt;&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;/pre&gt;
Das Form-Tag ergänzen wir um ein Attribut:
&lt;pre&gt;enctype=&amp;quot;multipart/form-data&amp;quot;&lt;/pre&gt;
&lt;p&gt;Um auch Binärdaten zu senden.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Zwischen die Form-Tags setzen wir die benötigten Steuerelemente, so dass die aspx-Seite jetzt etwa so aussieht:&lt;/p&gt;
&lt;pre&gt;&amp;lt;%@ Page Language="vb" AutoEventWireup="false" 
    Codebehind="upload.aspx.vb" Inherits="tutorials.upload"%&amp;gt;
&amp;lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;WebForm1&amp;lt;/title&amp;gt;
&amp;lt;meta name="GENERATOR" content="Microsoft Visual Studio.NET 7.0"&amp;gt;
&amp;lt;meta name="CODE_LANGUAGE" content="Visual Basic 7.0"&amp;gt;
&amp;lt;meta name="vs_defaultClientScript" content="JavaScript"&amp;gt;
&amp;lt;meta name="vs_targetSchema" 
            content="http://schemas.microsoft.com/intellisense/ie5"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;form id="Form1" method="post" runat="server" 
            enctype="multipart/form-data"&amp;gt;
&amp;lt;input type="file" name="file1" id="file1" runat="server" /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type="file" name="file2" id="file2" runat="server" /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type="file" name="file3" id="file3" runat="server" /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type="file" name="file4" id="file4" runat="server" /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type="file" name="file5" id="file5" runat="server" /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type="file" name="file6" id="file6" runat="server" /&amp;gt;&amp;lt;br /&amp;gt;
&amp;lt;input type="submit" name="send" id="send" 
            runat="server" value="submit" /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;asp:label id="Label1" runat="server"&amp;gt;&amp;lt;/asp:label&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/pre&gt;
Damit währe unser Testformular vollständig.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Die Codebehind-Klasse&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Um in die Codeansicht zu wechseln, klicken wir mit  der rechten Maustaste in auf die aspx-Seite und wählen "Code anzeigen".&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Folgender Code sollte vom VisualStudio angelegt worden  sein:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Public Class&lt;/span&gt; upload
    &lt;span style="color:#0000FF"&gt;Inherits&lt;/span&gt; System.Web.UI.Page
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; file1 &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
                System.Web.UI.HtmlControls.HtmlInputFile
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; file2 &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _ 
                System.Web.UI.HtmlControls.HtmlInputFile
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; file3 &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
                System.Web.UI.HtmlControls.HtmlInputFile
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; file4 &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
                System.Web.UI.HtmlControls.HtmlInputFile
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; file5 &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
                System.Web.UI.HtmlControls.HtmlInputFile
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; file6 &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
                System.Web.UI.HtmlControls.HtmlInputFile
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; Label1 &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
                ystem.Web.UI.WebControls.Label
    &lt;span style="color:#0000FF"&gt;Protected WithEvents&lt;/span&gt; send &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
                System.Web.UI.HtmlControls.HtmlInputButton
	
    #&lt;span style="color:#0000FF"&gt;Region&lt;/span&gt; " Web Form Designer Generated Code "

        'This call is required by the Web Form Designer.
        &amp;lt;System.Diagnostics.DebuggerStepThrough()&amp;gt; _
        &lt;span style="color:#0000FF"&gt;Private Sub&lt;/span&gt; InitializeComponent()

        &lt;span style="color:#0000FF"&gt;End Sub&lt;/span&gt;

        &lt;span style="color:#0000FF"&gt;Private Sub&lt;/span&gt; Page_Init(&lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; sender &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Object, _
                &lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; e &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.EventArgs) &lt;span style="color:#0000FF"&gt;Handles MyBase&lt;/span&gt;.Init
            'CODEGEN: This method call is required 
            'by the Web Form Designer
            'Do not modify it using the code editor.
            InitializeComponent()
        &lt;span style="color:#0000FF"&gt;End Sub&lt;/span&gt;

    #&lt;span style="color:#0000FF"&gt;End Region&lt;/span&gt;

    &lt;span style="color:#0000FF"&gt;Private Sub&lt;/span&gt; Page_Load(&lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; sender &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Object, _
            &lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; e &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.EventArgs) &lt;span style="color:#0000FF"&gt;Handles MyBase&lt;/span&gt;.Load
        'Put user code to initialize the page here

    &lt;span style="color:#0000FF"&gt;End Sub&lt;/span&gt;

&lt;span style="color:#0000FF"&gt;End Class&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Um die Datenbanken per Odbc anzusprechen, müssen  wir dem Projekt noch eine Referenz auf &lt;span style="font-style:italic"&gt;Odbc.net&lt;/span&gt; hinzufügen:&lt;/p&gt;
&lt;p&gt;Menü: "Projekt" =&amp;gt; "Referenz..."&lt;/p&gt;
&lt;p&gt;Oder Rechtsklick auf den Referenzordner im Projektexplorer:  "Referenz hinzufügen..." &lt;/p&gt;
&lt;p&gt;Wählen Sie in dem sich öffnendem Fenster "&lt;span style="font-style:italic"&gt;Microsoft.Data.Odbc.dll&lt;/span&gt;"; aus, klicken Sie anschließend auf "Auswählen"; und dann auf "OK";.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
(&lt;span style="font-weight:bold;"&gt;Anmerkung&lt;/span&gt;: Sollten Sie &lt;span style="font-weight:bold;"&gt;nur&lt;/span&gt; mit dem SQL Server arbeiten, brauchen Sie die Referenz nicht einzubinden, das gleiche gilt, wenn Sie &lt;span style="font-weight:bold;"&gt;nur&lt;/span&gt; Access benutzen:&lt;br&gt; Für den SQL Server ersetzen sie einfach alles was hier im Tutorial mit "&lt;span style="font-style:italic"&gt;Microsoft.Data.Odbc.Odbc...&lt;/span&gt;"; anfängt, mit "&lt;span style="font-style:italic"&gt;System.Data.SqlCient.Sql...&lt;/span&gt;". Für Access Ersetzen Sie "&lt;span style="font-style:italic"&gt;Microsoft.Data.Odbc.Odbc...&lt;/span&gt;"; mit "&lt;span style="font-style:italic"&gt;System.Data.Oledb.Oledb...&lt;/span&gt;";&lt;/p&gt;
&lt;p&gt;Die &lt;span style="font-style:italic"&gt;ConnectionStrings&lt;/span&gt; müssen natürlich dementsprechend angepasst werden)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Nun sollten Sie noch die Odbc-Verbindungen zu den Datenbanken einrichten.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Ist das geschehen, können wir uns daran machen, dem Code eine neue Funktion hinzu zufügen:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Private Sub&lt;/span&gt; saveInDB()
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strConn1 &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = "DSN=tut_sql;UID=user;PWD=passwd"
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strConn2 &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = "DSN=tut_mysql;UID=user;PWD=passwd"
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strConn3 &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = "DSN=tut_access;UID=user;PWD=passwd"
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Hier habe ich drei &lt;span style="font-style:italic"&gt;ConnectionStrings&lt;/span&gt; angelegt, für meine drei Testdatenbanken.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Anschließend wird ein Objekt deklariert, dass alle gesendeten Dateien empfängt:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; FileCollection &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Web.HttpFileCollection = Request.Files&lt;/pre&gt;				
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Folgende Deklarationen werden noch benötigt:&lt;/p&gt;
&lt;p&gt;Der Zähler für eine For-Schleife&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; i &lt;span style="color:#0000FF"&gt;As Integer&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Die Dateieigenschaften werden hier zwischengespeichert&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; ContentLength &lt;span style="color:#0000FF"&gt;As Long&lt;/span&gt;
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; FileName &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt;
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; ContentType &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt;&lt;/pre&gt;				
&lt;p&gt;&amp;nbsp;&lt;/p&gt;			
&lt;p&gt;noch ein &lt;span style="font-style:italic"&gt;Stream&lt;/span&gt;, der die Daten empfängt:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; IOStream &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.IO.Stream&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;				
&lt;p&gt;Und noch ein Zähler, der für Ausgabe benötigt wird&lt;/p&gt;
&lt;pre align="left"&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; Counter &lt;span style="color:#0000FF"&gt;As Integer&lt;/span&gt;&lt;/pre&gt;				
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Mit &lt;span style="font-style:italic"&gt;FileCollection.Count&lt;/span&gt; bekommen wir die Anzahl der File-Felder, also auch die Anzahl der möglichen hochgeladenen Dateien, die in einer For-Schleife durchgearbeitet werden:				&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;For&lt;/span&gt; i = 0 &lt;span style="color:#0000FF"&gt;To&lt;/span&gt; FileCollection.Count - 1&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;				
Füllen wir nun den &lt;span style="font-style:italic"&gt;IOStream&lt;/span&gt; mit einer Datei, hierbei dient der Zähler des Schleife auch als Index der &lt;span style="font-style:italic"&gt;FileCollection&lt;/span&gt;: &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;IOStream = FileCollection(i).InputStream&lt;/pre&gt;
&lt;p&gt;Die &lt;span style="font-style:italic"&gt;InputStream&lt;/span&gt;-Eigenschaft, liefert uns einen &lt;span style="font-style:italic"&gt;BinaryStream&lt;/span&gt;, der die aktuelle Datei enthält.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;So bekommen wir die Größe der Datei in Bytes, die wir hier mehramls brauchen werden&lt;/p&gt;
&lt;pre&gt;ContentLength = FileCollection(i).ContentLength&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Nun wird ein Array vom Typ Byte deklariert ("&lt;span style="font-style:italic"&gt;FileContent&lt;/span&gt;"), der die Datei nachher aufnehmen soll.&lt;/p&gt;
&lt;p&gt;Als Dimension wird die Dokumentgröße angegeben &lt;span style="font-style:italic"&gt;IOStream.Read&lt;/span&gt; ließt uns anschließend die Daten in das übergebene Array, der zweite Parameter enthält, ab welcher Position des Arrays die Daten eingefügt werden sollen und der Dritte, die Länge der Daten:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; FileContent(ContentLength) &lt;span style="color:#0000FF"&gt;As Byte&lt;/span&gt;
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; status &lt;span style="color:#0000FF"&gt;As Integer&lt;/span&gt;
status = IOStream.Read(FileContent, 0, ContentLength)&lt;/pre&gt;
&lt;p&gt;Die &lt;span style="font-style:italic"&gt;Funktion Read()&lt;/span&gt; gibt uns die Länge des Streams wieder, wenn also nichts empfangen wurde, erhalten wir 0, was uns hilft die weitere Verarbeitung zu überspringen, um fehler zu vermeiden, falls keine Daten vorhanden sind:
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;If&lt;/span&gt; status &amp;gt; 0 &lt;span style="color:#0000FF"&gt;Then&lt;/span&gt;
    Counter += 1 &lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;				
&lt;p&gt;Wenn also eine Datei im &lt;span style="font-style:italic"&gt;Stream&lt;/span&gt; enthalten ist, ist der Status auf jeden Fall größer als 0 und wir können mit der Verarbeitung fortfahren und unseren Dateienzähler "Counter"; um eins erhöhen.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Die Eigenschaft &lt;span style="font-style:italic"&gt;FilenName&lt;/span&gt; liefert uns den gesamten String, der im File-Feld zu sehen war, leider wird der uns sehr wenig bringen. Um nur den Dateinamen zu erhalten spiele ich hier mit den neuen String-Funktionen von vb.net herum:&lt;/p&gt;
&lt;pre&gt;FileName = FileCollection(i).FileName
FileName = FileName.Substring(FileName.LastIndexOf(&amp;quot;\&amp;quot;), _
            (FileName.Length - FileName.LastIndexOf(&amp;quot;\&amp;quot;)))
FileName = FileName.Substring(1, FileName.Length - 1)&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Für eine Spätere Verarbeitung der Datei, sollten wir auch noch den ContentType der Datei Speichern:&lt;/p&gt;
&lt;pre&gt;ContentType = FileCollection(i).ContentType&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;  				
&lt;p&gt;So nun bauen wir unsere Datenbankverbindung zusammen. Ganz wichtig ist hierbei der &lt;span style="font-style:italic"&gt;CommandBuilder&lt;/span&gt;, ohne den geht gar nichts. Er sorgt dafür, das nachher ein SQL-String zusammengebaut wird, der für ein Update der Datenbank sorgt:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; Connection &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; Microsoft.Data.Odbc.OdbcConnection(strConn1)
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strSQL &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = &amp;quot;SELECT &amp;quot; &amp;amp; _ 
        &amp;quot;contenttype, contentlength, &amp;quot; &amp;amp; _
        &amp;quot;filename, filecontent FROM documents&amp;quot;
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; Command &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
        New Microsoft.Data.Odbc.OdbcCommand(strSQL, Connection)
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; DataAdapter &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
        New Microsoft.Data.Odbc.OdbcDataAdapter(Command)
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; CommantBuilder &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
        New Microsoft.Data.Odbc.OdbcCommandBuilder(DataAdapter)
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; DataSet &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; System.Data.DataSet()&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Haben wir die Verbindung aufgebaut, müssen wir sie nur noch öffnen und unser &lt;spa????????u?©??????n style="font-style:italic"&gt;DataSet&lt;/span&gt; füllen: &lt;/p&gt;
&lt;pre&gt;Connection.Open()
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;DataAdapter.Fill(DataSet, &amp;quot;DOCS&amp;quot;)&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt; 
&lt;p&gt;Anschließend deklarieren wir eine &lt;span style="font-style:italic"&gt;DataRow&lt;/span&gt; und weisen Ihr eine neue Reihe aus unserem &lt;span style="font-style:italic"&gt;DataSet&lt;/span&gt; zu:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; DataRow &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Data.DataRow = DataSet.Tables(&amp;quot;DOCS&amp;quot;).NewRow&lt;/pre&gt;	
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
Dieses neue DataRow können wir nun mit unseren Daten füllen:&lt;/p&gt;
&lt;pre&gt;DataRow.Item(&amp;quot;contenttype&amp;quot;) = ContentType
DataRow.Item(&amp;quot;contentlength&amp;quot;) = ContentLength
DataRow.Item(&amp;quot;filename&amp;quot;) = FileName
DataRow.Item(&amp;quot;filecontent&amp;quot;) = FileContent&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Dann fügen wir den neuen Datensatz in Unser &lt;span style="font-style:italic"&gt;DataSet&lt;/span&gt; ein und Aktualisieren hiernach die Datenbank:&lt;/p&gt;
&lt;pre&gt;DataSet.Tables("DOCS").Rows.Add(DataRow)
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;DataAdapter.Update(DataSet, "DOCS")&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Jetzt sollten wir alle Objekte zerstören oder leeren, die wir innerhalb der If-Abfrage benutzt haben und diese beenden:&lt;/p&gt;
&lt;pre&gt;    DataRow = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;
    DataSet.Dispose()
    DataSet = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;
    CommantBuilder.Dispose()
    CommantBuilder = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;
    DataAdapter.Dispose()
    DataAdapter = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;
    Command.Dispose()
    Command = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;
    Connection.Close()
    Connection.Dispose()
    Connection = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;

&lt;span style="color:#0000FF"&gt;End If&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Anschließend zerstören wir das &lt;span style="font-style:italic"&gt;Byte-Array&lt;/span&gt;, den &lt;span style="font-style:italic"&gt;Stream&lt;/span&gt; und beenden die For-Schleife:&lt;/p&gt;
&lt;pre&gt;    FileContent = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;
     IOStream = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;

&lt;span style="color:#0000FF"&gt;Next&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Nun folgt nur noch die Zerstörung der &lt;span style="font-style:italic"&gt;FileColletion&lt;/span&gt;, die Ausgabe einer Statusmeldung in das Label und fertig ist die Upload-Funktion:&lt;/p&gt;
&lt;pre&gt;    FileCollection = &lt;span style="color:#0000FF"&gt;Nothing&lt;/span&gt;
    &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strMsg &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = Counter &amp; _
            " Dateien wurden in die Datenbank geladen"
    Label1.Text = strMsg
&lt;span style="color:#0000FF"&gt;End Sub&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Um die Funktion aufzurufen müssen wir noch folgenden Code in die Funktion "&lt;span style="font-style:italic"&gt;Page_Load&lt;/span&gt;" einfügen:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;If&lt;/span&gt; Page.IsPostBack &lt;span style="color:#0000FF"&gt;Then&lt;/span&gt;
    saveInDB()
&lt;span style="color:#0000FF"&gt;End If&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Diese Zeilen sorgen dafür, dass die Funktion nur ausgeführt wird, wenn das Formular gesendet wurde.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Abschließende Tipps&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Um die Dateigröße zu begrenzen, z. B. auf 4000 Bytes, kann man folgende paar Zeilen vor die If-Abfrage (&lt;span  style="font-family:Courier New, Courier, mono;"&gt;If status &amp;gt; 0 then ...&lt;/span&gt;) einfügen:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; errMsg &lt;span style="color:#0000FF"&gt;as String
If&lt;/span&gt; status &gt; 4000 &lt;span style="color:#0000FF"&gt;then&lt;/span&gt;
    status = 0
    errMsg &amp;= "Die Datei ""&amp;lt;b&amp;gt;"
    errMsg &amp;= FileCollection(i).FileName.toString
    errMsg &amp;= "&amp;lt;/b&amp;gt;"" ist zu groß!&amp;lt;br /&amp;gt;"
&lt;span style="color:#0000FF"&gt;End If&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Da hier "status" 0 zugewiesen wird, werden die Anweisungen innerhalb der nächsten If-Abfrage nicht mehr ausgeführt. Um die Meldung auszugeben, können Sie diese einfach an die Statusmeldung am Ende der &lt;span style="font-style:italic"&gt;Sub&lt;/span&gt; anfügen:				&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strMsg &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = Counter &amp; _
            " Dateien wurden in die Datenbank geladen"
Label1.Text = strMsg &amp;"&amp;lt;br /&amp;gt;&amp;" errMsg
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;				
&lt;p&gt;Das selbe können Sie machen, wenn Sie nur ein bestimmtes Dokumentenformat hochladen wollen:&lt;/p&gt;
&lt;pre&gt;&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; errMsg &lt;span style="color:#0000FF"&gt;as String&lt;/span&gt;
&lt;span style="color:#0000FF"&gt;If&lt;/span&gt; FileCollection(i).ContentType.toString = &amp;quot;;application/pdf&amp;#8221; &lt;span style="color:#0000FF"&gt;then&lt;/span&gt;
    status = 0
    errMsg &amp;amp;= "Die Datei ""&amp;lt;b&amp;gt;"
    errMsg &amp;amp;= FileCollection(i).FileName.toString
    errMsg &amp;amp;= "&amp;lt;/b&amp;gt;"" hat das falsche Format! &amp;lt;br /&amp;gt;"
&lt;span style="color:#0000FF"&gt;End If&lt;/span&gt;&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Donwload: &lt;a href="default.aspx?process=download/files/documents/_asp.net.fileupload.zip&amp;download=true" class="text"&gt;asp.net.fileupload.zip (158 KB)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
</text>
        </element>
      </elements>
    </container>
  </containers>
</page>