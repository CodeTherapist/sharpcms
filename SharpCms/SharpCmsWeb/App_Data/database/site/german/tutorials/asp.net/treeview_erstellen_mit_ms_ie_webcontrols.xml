<?xml version="1.0" encoding="utf-8"?>
<page>
  <attributes>
    <pagename>TreeView erstellen mit MS IE Webcontrols</pagename>
    <name>treeview_erstellen_mit_ms_ie_webcontrols</name>
    <menuname>TreeView_1</menuname>
    <pageidentifier>german/tutorials/asp.net/treeview_erstellen_mit_ms_ie_webcontrols</pageidentifier>
    <status>open</status>
    <lastedited>30.09.2003</lastedited>
    <metadescription>Erstellen eines TreeViews mit Daten aus der Datenbank.</metadescription>
    <metakeywords>TreeView, Microsoft.Web.UI.WebControls.TreeView, asp.net, vb.net, TreeNode</metakeywords>
  </attributes>
  <containers>
    <container name="content">
      <elements>
        <element type="header">
          <text>TreeView erstellen mit MS IE Webcontrols</text>
          <headerstyle>Header1</headerstyle>
          <offset>2 lines</offset>
        </element>
        <element type="freetext">
          <text>&lt;p&gt;Autor: Jürgen Gutsch&lt;/p&gt;
&lt;p&gt;Version: 1.0&lt;/p&gt;
&lt;p&gt;Sprache: vb.net&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Benötigt werden (mindestens):&lt;/p&gt;
&lt;p&gt;.net Framework 1.0&lt;/p&gt;
&lt;p&gt;MS IE Webcontrols&lt;/p&gt;
&lt;p&gt;IIS 5.x&lt;/p&gt;
&lt;p&gt;IE 5.5&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Getestet auf:&lt;/p&gt;
&lt;p&gt;WinXP&lt;/p&gt;
&lt;p&gt;IIS 5.1&lt;/p&gt;
&lt;p&gt;IE 6.0&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Die MS IE Webcontrols&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Die MS IE Webcontrols bestehen aus vier verschiedenen Controls, die sowohl clientseitig, als auch serverseitig in eine HTML-Seite eingebunden werden können.&lt;/p&gt;
&lt;p&gt;Das sind "MenuBar", "TabStrip", "MultiPage" und das "TreeView".&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Mehr zu diesen Webcontrols ist unter folgendem Link zu finden:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://msdn.microsoft.com/workshop/WebControls/webcontrols_entry.asp?frame=true" target="_blank" class="text"&gt;http://msdn.microsoft.com/[...]/webcontrols_entry.asp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Vorbereitung&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Als erstes solltet Ihr ein beliebiges Verzeichnis anlegen. Legt anschließend innerhalb dieses Verzeichnisses ein weiteres mit dem Namen "bin" an.&lt;/p&gt;
&lt;p&gt;Wenn die Webcontrols richtig installiert wurden, müsste im Windows Programmverzeichnis (c:\programme bzw. c:\program files) ein Verzeichnis mit dem Namen "Microsoft Internet Explorer WebControls" liegen. Dort liegt die Microsoft.Web.UI.WebControls.dll, die in das eben erstellte "bin"-Verzeichnis kopiert werden muss, damit wir diese später ohne Probleme ansprechen können.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;Ouml;ffnet als nächstes den IIS-Manager und erstellt ein neues virtuelles Verzeichnis. Als Alias für das virtuelle Verzeichnis habe ich "TreeView" gewählt. Als Pfad gebt Ihr das zuerst erstellte Verzeichnis an.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Jetzt müsst Ihr Euch nur noch vergewissern, dass im Root des IIS (standartmäßig C:\Inetpub\wwwroot) das verzeichnis "aspnet_client" vorhanden ist. Dieses Verzeichnis enthält einige clientseitige Scripts, die für die Darstellung der Webcontrols benötigt werden.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Wenn das soweit erledigt ist, können wir uns daran machen, eine Testseite zu erstellen:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Das Htmlgerüst&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Erstellt mit einem einem beliebigen Editor eine Datei mit der Endung "aspx" (ich habe den Namen "menu" gewählt).&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;form name="form1" &lt;span style="color:#0000FF"&gt;id="form1" runat="server"&lt;/span&gt;&amp;gt;
      &amp;lt;table width="100%" border="0" 
	            cellspacing="0" cellpadding="0"&amp;gt;
        &amp;lt;tr&amp;gt;
          &amp;lt;td width="20%" &lt;span style="color:#0000FF"&gt;id="cllMenu" runat="server"&lt;/span&gt; 
	            valign="top"&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;td width="80%" valign="top"&amp;gt;&amp;amp;nbsp;&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;
      &amp;lt;/table&amp;gt;
    &amp;lt;/form&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Das Gerüst steht: Wie jede aspx-Datei, hat auch diese einen &amp;lt;form&amp;gt;-Tag, dass, als Root-Control dient (mehr zur HtmlControll-Hierarchie folgt irgendwann in einem weiteren Artikel). Innerhalb des &amp;lt;form&amp;gt;-Tags sitzt eine Layouttabelle mit einem linken Menübereich, welcher 20% der Seitenbreiten einnimmt, in diese Tabellenzelle werden wir unser TreeView platziern. Aus diesem Grund habe ich der Zelle die ID "cllMenu" gegeben und das Attribut "runat=server" hinzugefügt (Ich habe also aus dieser einfachen Tabellenzelle ein serverseitiges HtmlControl vom Typ "System.Web.Ui.HtmlControls.HtmlTableCell" gemacht). Der rechte Bereich mit der Breite von 80% ist für Content reserviert (und für ein nächstes Tutorial mit dem namen "Abfangen von Events aus dem TreeView", o. ä.)&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;So, es fehlen noch ein paar Kleinigkeiten, bevor wir den HtmlCode ersteinmal eine weile ignorieren und uns die Datenbank und den VB-Code anschauen.&lt;/p&gt;
&lt;p&gt;Am Seitenanfang müssen noch einige asp.net-spezifische @-Direktiven gesetzt werden, und außerden brauchen wir noch einen &amp;lt;script...&amp;gt;&amp;lt;/script&amp;gt; Bereich&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Der Kopfbereich der Seite sollte jetzt wie folgt aussehen:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#0000FF"&gt;&amp;lt;%@ Page Language="VB" AutoEventWireup="false" Debug="true" %&amp;gt;&lt;/span&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Test&amp;lt;/title&amp;gt;
    &lt;span style="color:#0000FF"&gt;&amp;lt;script language="VB" runat="server"&amp;gt;&lt;/span&gt;
      [...]
    &lt;span style="color:#0000FF"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
  [...]
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Die Datanbank&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Folgende zwei Bilder sollten alles über die Menütabelle aussagen:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img src="default.aspx?process=download/files/pictures/tutorials/asp.net/_accesstable.gif" width="360" height="358"&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img src="default.aspx?process=download/files/pictures/tutorials/asp.net/_accessdata.gif" width="462" height="247"&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h3&gt;Der Programmcode&lt;/h3&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Der folgende Abschnit spielt sich nur zwischen dem &amp;lt;script&amp;gt;-Tag ab, so das ab jetzt kein Html mehr vorkommen wird. Einige von euch werden sich vieleicht wundern, dass Ich hier das übliche "&amp;lt;%@ Register ..." nicht verwende, um ein fremdes Control einzubinden, oder wieso im HtmlCode kein Tag "&amp;lt;prefix:TreeView ..." oder ähnlich vorkommt. &lt;/p&gt;
&lt;p&gt;Aber der Grund hierfür ist einfach: &lt;/p&gt;
&lt;p&gt;Seit ich asp.net kenne, habe ich eine abneigung gegen ASP-Tokens (&amp;lt;% ... %&amp;gt;) innerhalb von aspx-Seiten., genauso hab ich eine Abneigung gegen die Mischung aus Code und Design.&lt;/p&gt;
&lt;p&gt;So erzeuge ich also keine WebControls mit "&amp;lt;prefix:ControlName ..." und mache euch keine Ausgabe mit &amp;lt;%=Variable%&amp;gt;. auf die Art habe ich die Möglichkeit, falls es irgendwann notwendig sein sollte, alles was sich zwischen den &amp;lt;script&amp;gt;-Tags befindet, problemlos in eine CodeBehind-Classe zu kopieren.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Wie üblich fange ich als erstes mit Sub "Page_Load" an und deklariere die ersten benötigten Variablen und Objekte:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#009900"&gt;' &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; DatenBank ConnectionString;&lt;/span&gt;
&lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; DS &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" _
                                        &amp;amp; &lt;b&gt;Server&lt;/b&gt;.MapPath("test.mdb")

&lt;span style="color:#0000FF"&gt;Sub&lt;/span&gt; Page_Load(&lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; sender &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Object, _
              &lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; e &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.EventArgs) &lt;span style="color:#0000FF"&gt;Handles&lt;/span&gt; MyBase.Load

  &lt;span style="color:#0000FF"&gt;If Not &lt;/span&gt;Page.IsPostBack &lt;span style="color:#0000FF"&gt;then&lt;/span&gt;&lt;span style="color:#009900"&gt;
    ' &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; Erzeugen des Treeviews&lt;/span&gt;:
    &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; tv &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; Microsoft.Web.UI.WebControls.TreeView()&lt;span style="color:#009900"&gt;

    ' &gt;&gt;&gt;&gt;&gt; Das TreeView in die Zelle "cllMenu" einfügen&lt;/span&gt;:
    cllMenu.Controls.Add(tv)
  &lt;span style="color:#0000FF"&gt;End If
End Sub&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Oben sieht man schon meine Art, ein WebControls zu erzeugen und an eine bestimmte Stelle im HtmlCode einzufügen&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Noch wird man nicht viel vom TreeView sehen, wenn man die Seite aufrufen würde. Was wir jetzt noch brauchen, sind die Daten aus der DatenBank. Diese Lese ich in ein DataSet ein, was mir eine einfache Handhabung der Daten Ermöglicht, zudem Brauche ich die Verbindung zur DB nur einmal kurz zu öffnen, und kann sie dann getrost vergessen (nachdem ich sie wieder geschlossen habe, natürlich).&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Folgender Code zeigt die Funktion, die mir die Daten aus der DB ließt und anschließend ein DataSet zurückliefert:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#0000FF"&gt;Function&lt;/span&gt; getDataSet() &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Data.DataSet
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Verbindung zur DB erstellen&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; Connection &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; System.Data.OleDb.OleDbConnection(DS)
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Verbindung öffnen&lt;/span&gt;
  Connection.Open()
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; SqlQuery&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strSQL &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt; = "SELECT * FROM menu"
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; OleDbCommand erzeugen&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; Command &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; _
              &lt;span style="color:#0000FF"&gt;New&lt;/span&gt; System.Data.OleDb.OleDbCommand(strSQL, Connection)
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; DataAdapter erzeugen&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; DataAdapter &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; System.Data.OleDb.OleDbDataAdapter(Command)
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Das zu Füllende DataSet erzeugen&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; DataSet &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; System.Data.DataSet()
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; DataSet mit Hilfe des Adapters Füllen.
  ' &gt;&gt;&gt;&gt;&gt; Das erzeugte DataTable erhält hier noch den Namen "MENU"&lt;/span&gt;
  DataAdapter.Fill(DataSet,"MENU")
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Adapter zertören&lt;/span&gt;
  DataAdapter.Dispose()
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Command zertören&lt;/span&gt;
  Command.Dispose()
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Verbindung schließen&lt;/span&gt;
  Connection.Close()
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Verbindung zertören&lt;/span&gt;
  Connection.Dispose()
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; und zuletzt das DataSet zurückgeben:&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Return&lt;/span&gt; DataSet
&lt;span style="color:#0000FF"&gt;End Function&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Als nächstes habe ich eine Sub geschrieben, die das DataSet rekursiv durchgeht und so jeden Menüpunkt (TreeNode) erzeugt. Dabei muss man sich deutlich machen, dass ein TreView-Control aus mehreren TreeNode-Controls besteht, die wiederum weitere TreeNodes enthalten können. &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#0000FF"&gt;Function&lt;/span&gt; getMeTreeView( _
        &lt;span style="color:#0000FF"&gt;ByRef&lt;/span&gt; TreeNode &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; Microsoft.Web.UI.WebControls.TreeNode, _
        &lt;span style="color:#0000FF"&gt;ByRef&lt;/span&gt; DataSet &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Data.DataSet, _
        &lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; parentID &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; Integer) _
                &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; Microsoft.Web.UI.WebControls.TreeNode

  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; tn &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; Microsoft.Web.UI.WebControls.TreeNode
  
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Folgendes Statement füllt ein DataRow-Array mit&lt;/span&gt;
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; allen Daten aus dem DataSet, bei denen die "m_parent&lt;/span&gt;"
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; der als Parameter übergebene ParentID entspricht&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; dr() &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Data.DataRow = _
        DataSet.Tables("MENU").Select("m_parent=" &amp; parentID)

  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Variablen für die TreeNodes:&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strText &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; strLink &lt;span style="color:#0000FF"&gt;As String&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; intId &lt;span style="color:#0000FF"&gt;As Integer&lt;/span&gt;

  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Zähler für die For-Schleife:&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; i &lt;span style="color:#0000FF"&gt;As Integer&lt;/span&gt;
  &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Diese Schleife geht alle Daten im DataRow-Array durch:&lt;/span&gt;
  &lt;span style="color:#0000FF"&gt;For&lt;/span&gt; i = 0 &lt;span style="color:#0000FF"&gt;to&lt;/span&gt; dr.Length -1
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; TreeNode-Text:&lt;/span&gt;
    strText = dr(i).Item("m_text").ToString
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; TreeNode Link:&lt;/span&gt;
    strLink = dr(i).Item("m_link").ToString
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; ID des TreeNodes:&lt;/span&gt;
    intId = dr(i).Item("m_id")

    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; neues TreeNode erzeugen:&lt;/span&gt;
    tn = &lt;span style="color:#0000FF"&gt;New&lt;/span&gt; Microsoft.Web.UI.WebControls.TreeNode
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; id Setzen:&lt;/span&gt;
    tn.ID = intId
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Text setzen:&lt;/span&gt;
    tn.Text = strText
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Schriftart und -Größe Setzen:&lt;/span&gt;
    tn.DefaultStyle.Add("font-family", "arial")
    tn.DefaultStyle.Add("font-size", "11px")
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Link setzen, wenn vorhanden:&lt;/span&gt;
    &lt;span style="color:#0000FF"&gt;If&lt;/span&gt; strLink &lt;&gt; "-" &lt;span style="color:#0000FF"&gt;Then&lt;/span&gt; tn.NavigateUrl = strLink

    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; rekursiver Aufruf dieser Sub, wobei die Aktuelle&lt;/span&gt; 
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; ID als neue parendID übergeben wird:&lt;/span&gt;
    getMeTreeView(tn, DataSet, intId)
	
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; als letztes wird das eben erzeugte TreeNode dem&lt;/span&gt;
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; dem übergebenen hinzugefügt:&lt;/span&gt;
    TreeNode.Nodes.Add(tn)
  &lt;span style="color:#0000FF"&gt;Next&lt;/span&gt;
&lt;span style="color:#0000FF"&gt;End Function&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Jetzt bleibt uns nur noch eines zu tun, nämlich die beiden eben gezeigten Funktionen in der Page_Load aufzurufen:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;pre&gt;
&lt;span style="color:#0000FF"&gt;Sub&lt;/span&gt; Page_Load(&lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; sender &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.Object, _
              &lt;span style="color:#0000FF"&gt;ByVal&lt;/span&gt; e &lt;span style="color:#0000FF"&gt;As&lt;/span&gt; System.EventArgs) &lt;span style="color:#0000FF"&gt;Handles&lt;/span&gt; MyBase.Load

  &lt;span style="color:#0000FF"&gt;If&lt;/span&gt; Not Page.IsPostBack &lt;span style="color:#0000FF"&gt;then&lt;/span&gt;
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Erzeugen des TreeViews:&lt;/span&gt;
    &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; tv &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; Microsoft.Web.UI.WebControls.TreeView()
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Eigenschaften des TreeViews setzen:&lt;/span&gt;
    tv.ShowLines = &lt;span style="color:#0000FF"&gt;True&lt;/span&gt;
    tv.ShowPlus = &lt;span style="color:#0000FF"&gt;True&lt;/span&gt;
    tv.ShowToolTip = &lt;span style="color:#0000FF"&gt;True&lt;/span&gt;
	
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; neues TreeNode erzeugen:&lt;/span&gt;
    &lt;span style="color:#0000FF"&gt;Dim&lt;/span&gt; tn &lt;span style="color:#0000FF"&gt;As New&lt;/span&gt; Microsoft.Web.UI.WebControls.TreeNode

    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; ID Setzen:&lt;/span&gt;
    tn.ID = 0
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Text setzen&lt;/span&gt;
    tn.Text = "ROOT"
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Scriftformat&lt;/span&gt;
    tn.DefaultStyle.Add("font-family", "arial")
    tn.DefaultStyle.Add("font-size", "11px")
	
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Rekursion aufrufen und Untergeordnete Nodes erzeugen:&lt;/span&gt;
    getMeTreeView(tn, getDataSet(),0)
			
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; TreeNode mit untergeordneten Nodes&lt;/span&gt; 
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; dem TreeView hinzufügen&lt;/span&gt;
    tv.Nodes.Add(tn)
			
    &lt;span style="color:#009900"&gt;' &gt;&gt;&gt;&gt;&gt; Das TreeView in die Zelle "cllMenu" einfügen:&lt;/span&gt;
    cllMenu.Controls.Add(tv)
  &lt;span style="color:#0000FF"&gt;End If&lt;/span&gt;
&lt;span style="color:#0000FF"&gt;End Sub&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Das war es auch schon. Diese paar Zeilen sind nur nötig, um ein funktionierendes Baummenü zu schreiben&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Ein Aufruf der Seite sollte jetzt folgende Bilder erzeugen:&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img src="default.aspx?process=download/files/pictures/tutorials/asp.net/_menus.gif" width="375" height="226"&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;Zu guter letzt gibt es das Beispiel wie immer zum saugen und testen:&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Donwload: &lt;a href="default.aspx?process=download/files/documents/_treeview01.zip&amp;download=true" class="text"&gt;treeview01.zip (68 KB)&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;</text>
        </element>
      </elements>
    </container>
  </containers>
</page>